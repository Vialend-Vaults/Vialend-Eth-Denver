// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ApiMetaData contains all meta data concerning the Api contract.
var ApiMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oSqth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_individualCap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"f0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"f1\",\"type\":\"uint256\"}],\"name\":\"MintFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"name\":\"PendingWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Assetholder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn1\",\"type\":\"uint256\"}],\"name\":\"calcPositionShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a1\",\"type\":\"uint256\"}],\"name\":\"calcShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn1\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getbalance0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getbalance1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"mintFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moveFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oSqth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setIndividualCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oSqth\",\"type\":\"address\"}],\"name\":\"setSqueethAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setVaultCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wdsLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6101006040523480156200001257600080fd5b5060405162002fb338038062002fb383398101604081905262000035916200021e565b604080518082018252601a81527f5669614c656e6420556e6920436f6d706f756e6420546f6b656e0000000000006020808301918252835180850190945260048452630565543360e41b90840152815191929162000096916003916200015b565b508051620000ac9060049060208401906200015b565b50506001600555506001600160a01b038481169087161480620000e05750846001600160a01b0316846001600160a01b0316145b620001165760405162461bcd60e51b8152602060048201526002602482015261062360f41b604482015260640160405180910390fd5b6001600160a01b0396871660805294861660a05292851660c05290841660e052600980546001600160a01b0319169190941617909255600a91909155600b55620002de565b8280546200016990620002a1565b90600052602060002090601f0160209004810192826200018d5760008555620001d8565b82601f10620001a857805160ff1916838001178555620001d8565b82800160010185558215620001d8579182015b82811115620001d8578251825591602001919060010190620001bb565b50620001e6929150620001ea565b5090565b5b80821115620001e65760008155600101620001eb565b80516001600160a01b03811681146200021957600080fd5b919050565b600080600080600080600060e0888a0312156200023a57600080fd5b620002458862000201565b9650620002556020890162000201565b9550620002656040890162000201565b9450620002756060890162000201565b9350620002856080890162000201565b925060a0880151915060c0880151905092959891949750929550565b600181811c90821680620002b657607f821691505b60208210811415620002d857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051612bfa620003b9600039600081816105f20152610f4e0152600081816106a501528181610b1601528181610cef015281816117fb01528181611a6301526122610152600081816102dc01528181610cb201528181610f240152818161162d015281816117b901528181611a2801526122270152600081816105be015281816107da01528181610bd701528181610ff30152818161114d015281816114a50152818161156a015281816116830152818161189501528181611b2c01528181611c2001526120200152612bfa6000f3fe6080604052600436106102115760003560e01c8063a577e0bc11610117578063cd2b3026116100a5578063dd62ed3e1161006c578063dd62ed3e14610708578063e2bbb1581461074e578063f0f5907d1461076e578063f2a40db81461078e578063fb124cba146107ae57005b8063cd2b302614610649578063ceadeae014610669578063d0b6ba2a1461067e578063d21220a714610693578063d2fba001146106c757005b8063b27686c0116100e9578063b27686c014610597578063c45a0155146105ac578063c55dae63146105e0578063c6ab5d9014610614578063cc6a1a061461063457005b8063a577e0bc1461050a578063a9059cbb1461052a578063aabfd5721461054a578063ab5190201461057757005b806333e2f2ea1161019f5780636ea056a9116101665780636ea056a91461046a57806370a082311461048a5780637c7311fe146104c057806395d89b41146104d5578063a457c2d7146104ea57005b806333e2f2ea14610367578063385602f8146103a257806339509351146103b75780633c1bda09146103d75780635bb6aa85146103ed57005b80630d1b5bed116101e35780630d1b5bed146102b55780630dfe1681146102ca57806318160ddd1461031657806323b872dd1461032b578063313ce5671461034b57005b80630276650b1461021a578063032a836d1461024357806306fdde0314610263578063095ea7b31461028557005b3661021857005b005b34801561022657600080fd5b50610230600b5481565b6040519081526020015b60405180910390f35b34801561024f57600080fd5b5061021861025e366004612828565b6107ce565b34801561026f57600080fd5b506102786108ab565b60405161023a9190612871565b34801561029157600080fd5b506102a56102a03660046128a4565b61093d565b604051901515815260200161023a565b3480156102c157600080fd5b50600c54610230565b3480156102d657600080fd5b506102fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161023a565b34801561032257600080fd5b50600254610230565b34801561033757600080fd5b506102a56103463660046128d0565b610953565b34801561035757600080fd5b506040516012815260200161023a565b34801561037357600080fd5b50610387610382366004612911565b6109ff565b6040805193845260208401929092529082015260600161023a565b3480156103ae57600080fd5b50610230610afe565b3480156103c357600080fd5b506102a56103d23660046128a4565b610b8f565b3480156103e357600080fd5b50610230600a5481565b3480156103f957600080fd5b5061043d610408366004612828565b600860205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161023a565b34801561047657600080fd5b506102186104853660046128a4565b610bcb565b34801561049657600080fd5b506102306104a5366004612828565b6001600160a01b031660009081526020819052604090205490565b3480156104cc57600080fd5b50610218610d6e565b3480156104e157600080fd5b50610278610dca565b3480156104f657600080fd5b506102a56105053660046128a4565b610dd9565b34801561051657600080fd5b506009546102fe906001600160a01b031681565b34801561053657600080fd5b506102a56105453660046128a4565b610e72565b34801561055657600080fd5b50610230610565366004612828565b60076020526000908152604090205481565b34801561058357600080fd5b50610230610592366004612911565b610e7f565b3480156105a357600080fd5b50610218610fd4565b3480156105b857600080fd5b506102fe7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ec57600080fd5b506102fe7f000000000000000000000000000000000000000000000000000000000000000081565b34801561062057600080fd5b5061021861062f366004612933565b611138565b34801561064057600080fd5b50610218611490565b34801561065557600080fd5b50610218610664366004612956565b61155e565b34801561067557600080fd5b50610230611615565b34801561068a57600080fd5b50610218611664565b34801561069f57600080fd5b506102fe7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106d357600080fd5b506106e76106e2366004612956565b61184b565b604080516001600160a01b03909316835260ff90911660208301520161023a565b34801561071457600080fd5b5061023061072336600461296f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561075a57600080fd5b50610218610769366004612911565b611880565b34801561077a57600080fd5b50610218610789366004612956565b611b20565b34801561079a57600080fd5b506102fe6107a9366004612956565b611bd7565b3480156107ba57600080fd5b506102186107c93660046129a8565b611c01565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e9960c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a91906129dd565b6001600160a01b0316146108895760405162461bcd60e51b8152600401610880906129fa565b60405180910390fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6060600380546108ba90612a1e565b80601f01602080910402602001604051908101604052809291908181526020018280546108e690612a1e565b80156109335780601f1061090857610100808354040283529160200191610933565b820191906000526020600020905b81548152906001019060200180831161091657829003601f168201915b5050505050905090565b600061094a338484611d16565b50600192915050565b6000610960848484611e3a565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156109e55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610880565b6109f28533858403611d16565b60019150505b9392505050565b6000828282610a0d60025490565b905080610a2557610a1e8383610e7f565b9350610af6565b600080610a30612008565b6001600160a01b031663c4a7761e6040518163ffffffff1660e01b815260040160408051808303816000875af1158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190612a59565b91509150610a9e611615565b610aa89083612a93565b9150610ab2610afe565b610abc9082612a93565b90506000610aca8383610e7f565b90506000610ad88a8a610e7f565b905081610ae58683612aab565b610aef9190612aca565b9750505050505b509250925092565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a9190612aec565b905090565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161094a918590610bc6908690612a93565b611d16565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e9960c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5791906129dd565b6001600160a01b031614610c7d5760405162461bcd60e51b8152600401610880906129fa565b33610cb05760405162461bcd60e51b81526020600482015260036024820152620e660f60eb1b6044820152606401610880565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614158015610d2457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b610d565760405162461bcd60e51b8152602060048201526003602482015262746f6b60e81b6044820152606401610880565b610d6a6001600160a01b0383163383612093565b5050565b610d76612008565b6001600160a01b0316637c7311fe6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610db057600080fd5b505af1158015610dc4573d6000803e3d6000fd5b50505050565b6060600480546108ba90612a1e565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610e5b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610880565b610e683385858403611d16565b5060019392505050565b600061094a338484611e3a565b600080610e8a612008565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eeb9190612aec565b905060008111610f225760405162461bcd60e51b8152602060048201526002602482015261070360f41b6044820152606401610880565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610fa657610f858185612aca565b610f9790670de0b6b3a7640000612aab565b610fa19084612a93565b610fcc565b610fb08184612aca565b610fc290670de0b6b3a7640000612aab565b610fcc9085612a93565b949350505050565b604051630ccc6b1960e31b815230600482015233906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063666358c890602401602060405180830381865afa15801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105e91906129dd565b6001600160a01b0316146110845760405162461bcd60e51b815260040161088090612b05565b600c541561113657600c5460009061109e90600190612b28565b90506110fd600c82815481106110b6576110b6612b3f565b600091825260209091200154600c80546001600160a01b0390921691849081106110e2576110e2612b3f565b600091825260209091200154600160a01b900460ff166120f6565b600c80548061110e5761110e612b55565b600082815260209020810160001990810180546001600160a81b031916905501905550611084565b565b604051635bb5122d60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b76a245a90602401602060405180830381865afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c09190612aec565b6001146111fc5760405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b6044820152606401610880565b6001606460ff8316111561123b5760405162461bcd60e51b8152600401610880906020808252600490820152630703130360e41b604082015260600190565b3360009081526020819052604081205460649061125c9060ff861690612aab565b6112669190612aca565b9050600061127360025490565b9050600061127f611615565b9050600061128b610afe565b9050600080611298612008565b6001600160a01b031663c4a7761e6040518163ffffffff1660e01b815260040160408051808303816000875af11580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa9190612a59565b90925090506113098483612a93565b91506113158382612a93565b90506000856113248885612aab565b61132e9190612aca565b905060008661133d8985612aab565b6113479190612aca565b90508186101580156113595750808510155b1561136f5761136a338984846121b4565b600098505b881561144a5760006113803361235d565b9050600081121561140e576040805180820190915233815260ff808d1660208301908152600c805460018101825560009190915292517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790930180549151909216600160a01b026001600160a81b03199091166001600160a01b039390931692909217919091179055611448565b8a600c828154811061142257611422612b3f565b9060005260206000200160000160146101000a81548160ff021916908360ff1602179055505b505b604080513381528a151560208201527f737d22145a9fcc251124223d8fd388f39e914fbf3943968c334e1bd2e1685215910160405180910390a150505050505050505050565b604051635bb5122d60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b76a245a90602401602060405180830381865afa1580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190612aec565b6003146115535760405162461bcd60e51b8152602060048201526009602482015268656d657267656e637960b81b6044820152606401610880565b6111363360646120f6565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e9960c36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ea91906129dd565b6001600160a01b0316146116105760405162461bcd60e51b8152600401610880906129fa565b600b55565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401610b49565b604051630ccc6b1960e31b815230600482015233906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063666358c890602401602060405180830381865afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee91906129dd565b6001600160a01b0316146117145760405162461bcd60e51b815260040161088090612b05565b600061171e611615565b9050600061172a610afe565b6009546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179c9190612aec565b905082156117e0576117e06117af612008565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169085612093565b8115611822576118226117f1612008565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084612093565b801561184657611846611833612008565b6009546001600160a01b03169083612093565b505050565b600c818154811061185b57600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b900460ff1682565b604051635bb5122d60e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b76a245a90602401602060405180830381865afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119089190612aec565b6001146119445760405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b6044820152606401610880565b60008211806119535750600081115b6119885760405162461bcd60e51b8152600401610880906020808252600490820152630616d74360e41b604082015260600190565b336119bb5760405162461bcd60e51b81526020600482015260036024820152620c860f60eb1b6044820152606401610880565b60008060006119ca85856109ff565b92509250925060008311611a0b5760405162461bcd60e51b8152602060048201526008602482015267073686172653c3d360c41b6044820152606401610880565b611a1533846123c5565b8115611a5057611a506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856124a4565b8015611a8b57611a8b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846124a4565b3360009081526008602052604081208054849290611aaa908490612a93565b90915550503360009081526008602052604081206001018054839290611ad1908490612a93565b9091555050604080518481526020810184905290810182905233907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a25050505050565b336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e9960c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bac91906129dd565b6001600160a01b031614611bd25760405162461bcd60e51b8152600401610880906129fa565b600a55565b60068181548110611be757600080fd5b6000918252602090912001546001600160a01b0316905081565b604051630ccc6b1960e31b815230600482015233906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063666358c890602401602060405180830381865afa158015611c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8b91906129dd565b6001600160a01b031614611cb15760405162461bcd60e51b815260040161088090612b05565b6000611cbd8383610e7f565b60408051828152602081018690529081018490529091506001600160a01b038516907f9e3d2872f834d8efb99aa5e10ba94c9178c9969ab95c39f453b5807265389cbf9060600160405180910390a2610dc484826123c5565b6001600160a01b038316611d785760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610880565b6001600160a01b038216611dd95760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610880565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316611e9e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610880565b6001600160a01b038216611f005760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610880565b6001600160a01b03831660009081526020819052604090205481811015611f785760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610880565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611faf908490612a93565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ffb91815260200190565b60405180910390a3610dc4565b604051630ccc6b1960e31b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063666358c890602401602060405180830381865afa15801561206f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a91906129dd565b6040516001600160a01b03831660248201526044810182905261184690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526124dc565b600060648260ff1661211d856001600160a01b031660009081526020819052604090205490565b6121279190612aab565b6121319190612aca565b9050600061213e60025490565b90506001600160a01b038416158061215557508082115b156121605750505050565b60008061216b611615565b612173610afe565b90925090506121ac8685856121888287612aab565b6121929190612aca565b8661219d8987612aab565b6121a79190612aca565b6121b4565b505050505050565b60408051848152602081018490529081018290526001600160a01b038516907f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600160405180910390a28261220a57610dc4565b61221484846125ae565b811561224e5761224e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168584612093565b8015612288576122886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168583612093565b6001600160a01b03841660009081526008602052604090205482106122ae5760006122dd565b6001600160a01b038416600090815260086020526040812080548492906122d6908490612b28565b9250508190555b6001600160a01b038516600090815260086020526040902090815560010154811061230957600061233b565b6001600160a01b03841660009081526008602052604081206001018054839290612334908490612b28565b9250508190555b6001600160a01b03851660009081526008602052604090206001015550505050565b6000805b600c548110156123bb57826001600160a01b0316600c828154811061238857612388612b3f565b6000918252602090912001546001600160a01b031614156123a95792915050565b806123b381612b6b565b915050612361565b5060001992915050565b6001600160a01b03821661241b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610880565b806002600082825461242d9190612a93565b90915550506001600160a01b0382166000908152602081905260408120805483929061245a908490612a93565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610dc49085906323b872dd60e01b906084016120bf565b6000612531826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126fc9092919063ffffffff16565b805190915015611846578080602001905181019061254f9190612b86565b6118465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610880565b6001600160a01b03821661260e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610880565b6001600160a01b038216600090815260208190526040902054818110156126825760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610880565b6001600160a01b03831660009081526020819052604081208383039055600280548492906126b1908490612b28565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6060610fcc8484600085856001600160a01b0385163b61275e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610880565b600080866001600160a01b0316858760405161277a9190612ba8565b60006040518083038185875af1925050503d80600081146127b7576040519150601f19603f3d011682016040523d82523d6000602084013e6127bc565b606091505b50915091506127cc8282866127d7565b979650505050505050565b606083156127e65750816109f8565b8251156127f65782518084602001fd5b8160405162461bcd60e51b81526004016108809190612871565b6001600160a01b038116811461282557600080fd5b50565b60006020828403121561283a57600080fd5b81356109f881612810565b60005b83811015612860578181015183820152602001612848565b83811115610dc45750506000910152565b6020815260008251806020840152612890816040850160208701612845565b601f01601f19169190910160400192915050565b600080604083850312156128b757600080fd5b82356128c281612810565b946020939093013593505050565b6000806000606084860312156128e557600080fd5b83356128f081612810565b9250602084013561290081612810565b929592945050506040919091013590565b6000806040838503121561292457600080fd5b50508035926020909101359150565b60006020828403121561294557600080fd5b813560ff811681146109f857600080fd5b60006020828403121561296857600080fd5b5035919050565b6000806040838503121561298257600080fd5b823561298d81612810565b9150602083013561299d81612810565b809150509250929050565b6000806000606084860312156129bd57600080fd5b83356129c881612810565b95602085013595506040909401359392505050565b6000602082840312156129ef57600080fd5b81516109f881612810565b6020808252600a908201526937b7363c9030b236b4b760b11b604082015260600190565b600181811c90821680612a3257607f821691505b60208210811415612a5357634e487b7160e01b600052602260045260246000fd5b50919050565b60008060408385031215612a6c57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115612aa657612aa6612a7d565b500190565b6000816000190483118215151615612ac557612ac5612a7d565b500290565b600082612ae757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612afe57600080fd5b5051919050565b6020808252600990820152681b9bdd081cdd1c985d60ba1b604082015260600190565b600082821015612b3a57612b3a612a7d565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000600019821415612b7f57612b7f612a7d565b5060010190565b600060208284031215612b9857600080fd5b815180151581146109f857600080fd5b60008251612bba818460208701612845565b919091019291505056fea2646970667358221220d468bdd9571067a2ad68be59bf6775438cc1f735f201bb52ec8b890dcba2e87b64736f6c634300080a0033",
}

// ApiABI is the input ABI used to generate the binding from.
// Deprecated: Use ApiMetaData.ABI instead.
var ApiABI = ApiMetaData.ABI

// ApiBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApiMetaData.Bin instead.
var ApiBin = ApiMetaData.Bin

// DeployApi deploys a new Ethereum contract, binding an instance of Api to it.
func DeployApi(auth *bind.TransactOpts, backend bind.ContractBackend, _factory common.Address, _token0 common.Address, _token1 common.Address, _baseToken common.Address, _oSqth common.Address, _vaultCap *big.Int, _individualCap *big.Int) (common.Address, *types.Transaction, *Api, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApiBin), backend, _factory, _token0, _token1, _baseToken, _oSqth, _vaultCap, _individualCap)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// Api is an auto generated Go binding around an Ethereum contract.
type Api struct {
	ApiCaller     // Read-only binding to the contract
	ApiTransactor // Write-only binding to the contract
	ApiFilterer   // Log filterer for contract events
}

// ApiCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApiCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApiTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApiFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApiSession struct {
	Contract     *Api              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApiCallerSession struct {
	Contract *ApiCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ApiTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApiTransactorSession struct {
	Contract     *ApiTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApiRaw struct {
	Contract *Api // Generic contract binding to access the raw methods on
}

// ApiCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApiCallerRaw struct {
	Contract *ApiCaller // Generic read-only contract binding to access the raw methods on
}

// ApiTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApiTransactorRaw struct {
	Contract *ApiTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApi creates a new instance of Api, bound to a specific deployed contract.
func NewApi(address common.Address, backend bind.ContractBackend) (*Api, error) {
	contract, err := bindApi(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// NewApiCaller creates a new read-only instance of Api, bound to a specific deployed contract.
func NewApiCaller(address common.Address, caller bind.ContractCaller) (*ApiCaller, error) {
	contract, err := bindApi(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApiCaller{contract: contract}, nil
}

// NewApiTransactor creates a new write-only instance of Api, bound to a specific deployed contract.
func NewApiTransactor(address common.Address, transactor bind.ContractTransactor) (*ApiTransactor, error) {
	contract, err := bindApi(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApiTransactor{contract: contract}, nil
}

// NewApiFilterer creates a new log filterer instance of Api, bound to a specific deployed contract.
func NewApiFilterer(address common.Address, filterer bind.ContractFilterer) (*ApiFilterer, error) {
	contract, err := bindApi(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApiFilterer{contract: contract}, nil
}

// bindApi binds a generic wrapper to an already deployed contract.
func bindApi(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ApiABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.ApiCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.contract.Transact(opts, method, params...)
}

// Assetholder is a free data retrieval call binding the contract method 0x5bb6aa85.
//
// Solidity: function Assetholder(address ) view returns(uint256 deposit0, uint256 deposit1, uint256 current0, uint256 current1, uint256 block, uint256 withdrawShares)
func (_Api *ApiCaller) Assetholder(opts *bind.CallOpts, arg0 common.Address) (struct {
	Deposit0       *big.Int
	Deposit1       *big.Int
	Current0       *big.Int
	Current1       *big.Int
	Block          *big.Int
	WithdrawShares *big.Int
}, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "Assetholder", arg0)

	outstruct := new(struct {
		Deposit0       *big.Int
		Deposit1       *big.Int
		Current0       *big.Int
		Current1       *big.Int
		Block          *big.Int
		WithdrawShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Deposit0 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Deposit1 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Current0 = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Current1 = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Block = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.WithdrawShares = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Assetholder is a free data retrieval call binding the contract method 0x5bb6aa85.
//
// Solidity: function Assetholder(address ) view returns(uint256 deposit0, uint256 deposit1, uint256 current0, uint256 current1, uint256 block, uint256 withdrawShares)
func (_Api *ApiSession) Assetholder(arg0 common.Address) (struct {
	Deposit0       *big.Int
	Deposit1       *big.Int
	Current0       *big.Int
	Current1       *big.Int
	Block          *big.Int
	WithdrawShares *big.Int
}, error) {
	return _Api.Contract.Assetholder(&_Api.CallOpts, arg0)
}

// Assetholder is a free data retrieval call binding the contract method 0x5bb6aa85.
//
// Solidity: function Assetholder(address ) view returns(uint256 deposit0, uint256 deposit1, uint256 current0, uint256 current1, uint256 block, uint256 withdrawShares)
func (_Api *ApiCallerSession) Assetholder(arg0 common.Address) (struct {
	Deposit0       *big.Int
	Deposit1       *big.Int
	Current0       *big.Int
	Current1       *big.Int
	Block          *big.Int
	WithdrawShares *big.Int
}, error) {
	return _Api.Contract.Assetholder(&_Api.CallOpts, arg0)
}

// AccId is a free data retrieval call binding the contract method 0xaabfd572.
//
// Solidity: function accId(address ) view returns(uint256)
func (_Api *ApiCaller) AccId(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "accId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccId is a free data retrieval call binding the contract method 0xaabfd572.
//
// Solidity: function accId(address ) view returns(uint256)
func (_Api *ApiSession) AccId(arg0 common.Address) (*big.Int, error) {
	return _Api.Contract.AccId(&_Api.CallOpts, arg0)
}

// AccId is a free data retrieval call binding the contract method 0xaabfd572.
//
// Solidity: function accId(address ) view returns(uint256)
func (_Api *ApiCallerSession) AccId(arg0 common.Address) (*big.Int, error) {
	return _Api.Contract.AccId(&_Api.CallOpts, arg0)
}

// Accounts is a free data retrieval call binding the contract method 0xf2a40db8.
//
// Solidity: function accounts(uint256 ) view returns(address)
func (_Api *ApiCaller) Accounts(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "accounts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Accounts is a free data retrieval call binding the contract method 0xf2a40db8.
//
// Solidity: function accounts(uint256 ) view returns(address)
func (_Api *ApiSession) Accounts(arg0 *big.Int) (common.Address, error) {
	return _Api.Contract.Accounts(&_Api.CallOpts, arg0)
}

// Accounts is a free data retrieval call binding the contract method 0xf2a40db8.
//
// Solidity: function accounts(uint256 ) view returns(address)
func (_Api *ApiCallerSession) Accounts(arg0 *big.Int) (common.Address, error) {
	return _Api.Contract.Accounts(&_Api.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Api *ApiCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Api *ApiSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Api.Contract.Allowance(&_Api.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Api *ApiCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Api.Contract.Allowance(&_Api.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Api *ApiCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Api *ApiSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Api.Contract.BalanceOf(&_Api.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Api *ApiCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Api.Contract.BalanceOf(&_Api.CallOpts, account)
}

// BaseToken is a free data retrieval call binding the contract method 0xc55dae63.
//
// Solidity: function baseToken() view returns(address)
func (_Api *ApiCaller) BaseToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "baseToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BaseToken is a free data retrieval call binding the contract method 0xc55dae63.
//
// Solidity: function baseToken() view returns(address)
func (_Api *ApiSession) BaseToken() (common.Address, error) {
	return _Api.Contract.BaseToken(&_Api.CallOpts)
}

// BaseToken is a free data retrieval call binding the contract method 0xc55dae63.
//
// Solidity: function baseToken() view returns(address)
func (_Api *ApiCallerSession) BaseToken() (common.Address, error) {
	return _Api.Contract.BaseToken(&_Api.CallOpts)
}

// CalcShare is a free data retrieval call binding the contract method 0xab519020.
//
// Solidity: function calcShare(uint256 a0, uint256 a1) view returns(uint256)
func (_Api *ApiCaller) CalcShare(opts *bind.CallOpts, a0 *big.Int, a1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "calcShare", a0, a1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalcShare is a free data retrieval call binding the contract method 0xab519020.
//
// Solidity: function calcShare(uint256 a0, uint256 a1) view returns(uint256)
func (_Api *ApiSession) CalcShare(a0 *big.Int, a1 *big.Int) (*big.Int, error) {
	return _Api.Contract.CalcShare(&_Api.CallOpts, a0, a1)
}

// CalcShare is a free data retrieval call binding the contract method 0xab519020.
//
// Solidity: function calcShare(uint256 a0, uint256 a1) view returns(uint256)
func (_Api *ApiCallerSession) CalcShare(a0 *big.Int, a1 *big.Int) (*big.Int, error) {
	return _Api.Contract.CalcShare(&_Api.CallOpts, a0, a1)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Api *ApiCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Api *ApiSession) Decimals() (uint8, error) {
	return _Api.Contract.Decimals(&_Api.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Api *ApiCallerSession) Decimals() (uint8, error) {
	return _Api.Contract.Decimals(&_Api.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Api *ApiCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Api *ApiSession) Factory() (common.Address, error) {
	return _Api.Contract.Factory(&_Api.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Api *ApiCallerSession) Factory() (common.Address, error) {
	return _Api.Contract.Factory(&_Api.CallOpts)
}

// Getbalance0 is a free data retrieval call binding the contract method 0xceadeae0.
//
// Solidity: function getbalance0() view returns(uint256)
func (_Api *ApiCaller) Getbalance0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getbalance0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getbalance0 is a free data retrieval call binding the contract method 0xceadeae0.
//
// Solidity: function getbalance0() view returns(uint256)
func (_Api *ApiSession) Getbalance0() (*big.Int, error) {
	return _Api.Contract.Getbalance0(&_Api.CallOpts)
}

// Getbalance0 is a free data retrieval call binding the contract method 0xceadeae0.
//
// Solidity: function getbalance0() view returns(uint256)
func (_Api *ApiCallerSession) Getbalance0() (*big.Int, error) {
	return _Api.Contract.Getbalance0(&_Api.CallOpts)
}

// Getbalance1 is a free data retrieval call binding the contract method 0x385602f8.
//
// Solidity: function getbalance1() view returns(uint256)
func (_Api *ApiCaller) Getbalance1(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getbalance1")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getbalance1 is a free data retrieval call binding the contract method 0x385602f8.
//
// Solidity: function getbalance1() view returns(uint256)
func (_Api *ApiSession) Getbalance1() (*big.Int, error) {
	return _Api.Contract.Getbalance1(&_Api.CallOpts)
}

// Getbalance1 is a free data retrieval call binding the contract method 0x385602f8.
//
// Solidity: function getbalance1() view returns(uint256)
func (_Api *ApiCallerSession) Getbalance1() (*big.Int, error) {
	return _Api.Contract.Getbalance1(&_Api.CallOpts)
}

// IndividualCap is a free data retrieval call binding the contract method 0x0276650b.
//
// Solidity: function individualCap() view returns(uint256)
func (_Api *ApiCaller) IndividualCap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "individualCap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IndividualCap is a free data retrieval call binding the contract method 0x0276650b.
//
// Solidity: function individualCap() view returns(uint256)
func (_Api *ApiSession) IndividualCap() (*big.Int, error) {
	return _Api.Contract.IndividualCap(&_Api.CallOpts)
}

// IndividualCap is a free data retrieval call binding the contract method 0x0276650b.
//
// Solidity: function individualCap() view returns(uint256)
func (_Api *ApiCallerSession) IndividualCap() (*big.Int, error) {
	return _Api.Contract.IndividualCap(&_Api.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiSession) Name() (string, error) {
	return _Api.Contract.Name(&_Api.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiCallerSession) Name() (string, error) {
	return _Api.Contract.Name(&_Api.CallOpts)
}

// OSqth is a free data retrieval call binding the contract method 0xa577e0bc.
//
// Solidity: function oSqth() view returns(address)
func (_Api *ApiCaller) OSqth(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "oSqth")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OSqth is a free data retrieval call binding the contract method 0xa577e0bc.
//
// Solidity: function oSqth() view returns(address)
func (_Api *ApiSession) OSqth() (common.Address, error) {
	return _Api.Contract.OSqth(&_Api.CallOpts)
}

// OSqth is a free data retrieval call binding the contract method 0xa577e0bc.
//
// Solidity: function oSqth() view returns(address)
func (_Api *ApiCallerSession) OSqth() (common.Address, error) {
	return _Api.Contract.OSqth(&_Api.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiSession) Symbol() (string, error) {
	return _Api.Contract.Symbol(&_Api.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiCallerSession) Symbol() (string, error) {
	return _Api.Contract.Symbol(&_Api.CallOpts)
}

// Token0 is a free data retrieval call binding the contract method 0x0dfe1681.
//
// Solidity: function token0() view returns(address)
func (_Api *ApiCaller) Token0(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "token0")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token0 is a free data retrieval call binding the contract method 0x0dfe1681.
//
// Solidity: function token0() view returns(address)
func (_Api *ApiSession) Token0() (common.Address, error) {
	return _Api.Contract.Token0(&_Api.CallOpts)
}

// Token0 is a free data retrieval call binding the contract method 0x0dfe1681.
//
// Solidity: function token0() view returns(address)
func (_Api *ApiCallerSession) Token0() (common.Address, error) {
	return _Api.Contract.Token0(&_Api.CallOpts)
}

// Token1 is a free data retrieval call binding the contract method 0xd21220a7.
//
// Solidity: function token1() view returns(address)
func (_Api *ApiCaller) Token1(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "token1")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token1 is a free data retrieval call binding the contract method 0xd21220a7.
//
// Solidity: function token1() view returns(address)
func (_Api *ApiSession) Token1() (common.Address, error) {
	return _Api.Contract.Token1(&_Api.CallOpts)
}

// Token1 is a free data retrieval call binding the contract method 0xd21220a7.
//
// Solidity: function token1() view returns(address)
func (_Api *ApiCallerSession) Token1() (common.Address, error) {
	return _Api.Contract.Token1(&_Api.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiSession) TotalSupply() (*big.Int, error) {
	return _Api.Contract.TotalSupply(&_Api.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiCallerSession) TotalSupply() (*big.Int, error) {
	return _Api.Contract.TotalSupply(&_Api.CallOpts)
}

// VaultCap is a free data retrieval call binding the contract method 0x3c1bda09.
//
// Solidity: function vaultCap() view returns(uint256)
func (_Api *ApiCaller) VaultCap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "vaultCap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VaultCap is a free data retrieval call binding the contract method 0x3c1bda09.
//
// Solidity: function vaultCap() view returns(uint256)
func (_Api *ApiSession) VaultCap() (*big.Int, error) {
	return _Api.Contract.VaultCap(&_Api.CallOpts)
}

// VaultCap is a free data retrieval call binding the contract method 0x3c1bda09.
//
// Solidity: function vaultCap() view returns(uint256)
func (_Api *ApiCallerSession) VaultCap() (*big.Int, error) {
	return _Api.Contract.VaultCap(&_Api.CallOpts)
}

// Wds is a free data retrieval call binding the contract method 0xd2fba001.
//
// Solidity: function wds(uint256 ) view returns(address recipient, uint8 percent)
func (_Api *ApiCaller) Wds(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Recipient common.Address
	Percent   uint8
}, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "wds", arg0)

	outstruct := new(struct {
		Recipient common.Address
		Percent   uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Recipient = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Percent = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// Wds is a free data retrieval call binding the contract method 0xd2fba001.
//
// Solidity: function wds(uint256 ) view returns(address recipient, uint8 percent)
func (_Api *ApiSession) Wds(arg0 *big.Int) (struct {
	Recipient common.Address
	Percent   uint8
}, error) {
	return _Api.Contract.Wds(&_Api.CallOpts, arg0)
}

// Wds is a free data retrieval call binding the contract method 0xd2fba001.
//
// Solidity: function wds(uint256 ) view returns(address recipient, uint8 percent)
func (_Api *ApiCallerSession) Wds(arg0 *big.Int) (struct {
	Recipient common.Address
	Percent   uint8
}, error) {
	return _Api.Contract.Wds(&_Api.CallOpts, arg0)
}

// WdsLen is a free data retrieval call binding the contract method 0x0d1b5bed.
//
// Solidity: function wdsLen() view returns(uint256)
func (_Api *ApiCaller) WdsLen(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "wdsLen")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WdsLen is a free data retrieval call binding the contract method 0x0d1b5bed.
//
// Solidity: function wdsLen() view returns(uint256)
func (_Api *ApiSession) WdsLen() (*big.Int, error) {
	return _Api.Contract.WdsLen(&_Api.CallOpts)
}

// WdsLen is a free data retrieval call binding the contract method 0x0d1b5bed.
//
// Solidity: function wdsLen() view returns(uint256)
func (_Api *ApiCallerSession) WdsLen() (*big.Int, error) {
	return _Api.Contract.WdsLen(&_Api.CallOpts)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xcc6a1a06.
//
// Solidity: function EmergencyWithdraw() returns()
func (_Api *ApiTransactor) EmergencyWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "EmergencyWithdraw")
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xcc6a1a06.
//
// Solidity: function EmergencyWithdraw() returns()
func (_Api *ApiSession) EmergencyWithdraw() (*types.Transaction, error) {
	return _Api.Contract.EmergencyWithdraw(&_Api.TransactOpts)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xcc6a1a06.
//
// Solidity: function EmergencyWithdraw() returns()
func (_Api *ApiTransactorSession) EmergencyWithdraw() (*types.Transaction, error) {
	return _Api.Contract.EmergencyWithdraw(&_Api.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Api *ApiTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Api *ApiSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Approve(&_Api.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Api *ApiTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Approve(&_Api.TransactOpts, spender, amount)
}

// CalcPositionShares is a paid mutator transaction binding the contract method 0x33e2f2ea.
//
// Solidity: function calcPositionShares(uint256 amountIn0, uint256 amountIn1) returns(uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiTransactor) CalcPositionShares(opts *bind.TransactOpts, amountIn0 *big.Int, amountIn1 *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "calcPositionShares", amountIn0, amountIn1)
}

// CalcPositionShares is a paid mutator transaction binding the contract method 0x33e2f2ea.
//
// Solidity: function calcPositionShares(uint256 amountIn0, uint256 amountIn1) returns(uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiSession) CalcPositionShares(amountIn0 *big.Int, amountIn1 *big.Int) (*types.Transaction, error) {
	return _Api.Contract.CalcPositionShares(&_Api.TransactOpts, amountIn0, amountIn1)
}

// CalcPositionShares is a paid mutator transaction binding the contract method 0x33e2f2ea.
//
// Solidity: function calcPositionShares(uint256 amountIn0, uint256 amountIn1) returns(uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiTransactorSession) CalcPositionShares(amountIn0 *big.Int, amountIn1 *big.Int) (*types.Transaction, error) {
	return _Api.Contract.CalcPositionShares(&_Api.TransactOpts, amountIn0, amountIn1)
}

// CallFunds is a paid mutator transaction binding the contract method 0x7c7311fe.
//
// Solidity: function callFunds() returns()
func (_Api *ApiTransactor) CallFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "callFunds")
}

// CallFunds is a paid mutator transaction binding the contract method 0x7c7311fe.
//
// Solidity: function callFunds() returns()
func (_Api *ApiSession) CallFunds() (*types.Transaction, error) {
	return _Api.Contract.CallFunds(&_Api.TransactOpts)
}

// CallFunds is a paid mutator transaction binding the contract method 0x7c7311fe.
//
// Solidity: function callFunds() returns()
func (_Api *ApiTransactorSession) CallFunds() (*types.Transaction, error) {
	return _Api.Contract.CallFunds(&_Api.TransactOpts)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Api *ApiTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Api *ApiSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DecreaseAllowance(&_Api.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Api *ApiTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DecreaseAllowance(&_Api.TransactOpts, spender, subtractedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xe2bbb158.
//
// Solidity: function deposit(uint256 amountIn0, uint256 amountIn1) returns()
func (_Api *ApiTransactor) Deposit(opts *bind.TransactOpts, amountIn0 *big.Int, amountIn1 *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "deposit", amountIn0, amountIn1)
}

// Deposit is a paid mutator transaction binding the contract method 0xe2bbb158.
//
// Solidity: function deposit(uint256 amountIn0, uint256 amountIn1) returns()
func (_Api *ApiSession) Deposit(amountIn0 *big.Int, amountIn1 *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Deposit(&_Api.TransactOpts, amountIn0, amountIn1)
}

// Deposit is a paid mutator transaction binding the contract method 0xe2bbb158.
//
// Solidity: function deposit(uint256 amountIn0, uint256 amountIn1) returns()
func (_Api *ApiTransactorSession) Deposit(amountIn0 *big.Int, amountIn1 *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Deposit(&_Api.TransactOpts, amountIn0, amountIn1)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Api *ApiTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Api *ApiSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.IncreaseAllowance(&_Api.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Api *ApiTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.IncreaseAllowance(&_Api.TransactOpts, spender, addedValue)
}

// MintFees is a paid mutator transaction binding the contract method 0xfb124cba.
//
// Solidity: function mintFees(address to, uint256 fee0, uint256 fee1) returns()
func (_Api *ApiTransactor) MintFees(opts *bind.TransactOpts, to common.Address, fee0 *big.Int, fee1 *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "mintFees", to, fee0, fee1)
}

// MintFees is a paid mutator transaction binding the contract method 0xfb124cba.
//
// Solidity: function mintFees(address to, uint256 fee0, uint256 fee1) returns()
func (_Api *ApiSession) MintFees(to common.Address, fee0 *big.Int, fee1 *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintFees(&_Api.TransactOpts, to, fee0, fee1)
}

// MintFees is a paid mutator transaction binding the contract method 0xfb124cba.
//
// Solidity: function mintFees(address to, uint256 fee0, uint256 fee1) returns()
func (_Api *ApiTransactorSession) MintFees(to common.Address, fee0 *big.Int, fee1 *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintFees(&_Api.TransactOpts, to, fee0, fee1)
}

// MoveFunds is a paid mutator transaction binding the contract method 0xd0b6ba2a.
//
// Solidity: function moveFunds() returns()
func (_Api *ApiTransactor) MoveFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "moveFunds")
}

// MoveFunds is a paid mutator transaction binding the contract method 0xd0b6ba2a.
//
// Solidity: function moveFunds() returns()
func (_Api *ApiSession) MoveFunds() (*types.Transaction, error) {
	return _Api.Contract.MoveFunds(&_Api.TransactOpts)
}

// MoveFunds is a paid mutator transaction binding the contract method 0xd0b6ba2a.
//
// Solidity: function moveFunds() returns()
func (_Api *ApiTransactorSession) MoveFunds() (*types.Transaction, error) {
	return _Api.Contract.MoveFunds(&_Api.TransactOpts)
}

// SetIndividualCap is a paid mutator transaction binding the contract method 0xcd2b3026.
//
// Solidity: function setIndividualCap(uint256 newMax) returns()
func (_Api *ApiTransactor) SetIndividualCap(opts *bind.TransactOpts, newMax *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "setIndividualCap", newMax)
}

// SetIndividualCap is a paid mutator transaction binding the contract method 0xcd2b3026.
//
// Solidity: function setIndividualCap(uint256 newMax) returns()
func (_Api *ApiSession) SetIndividualCap(newMax *big.Int) (*types.Transaction, error) {
	return _Api.Contract.SetIndividualCap(&_Api.TransactOpts, newMax)
}

// SetIndividualCap is a paid mutator transaction binding the contract method 0xcd2b3026.
//
// Solidity: function setIndividualCap(uint256 newMax) returns()
func (_Api *ApiTransactorSession) SetIndividualCap(newMax *big.Int) (*types.Transaction, error) {
	return _Api.Contract.SetIndividualCap(&_Api.TransactOpts, newMax)
}

// SetSqueethAddress is a paid mutator transaction binding the contract method 0x032a836d.
//
// Solidity: function setSqueethAddress(address _oSqth) returns()
func (_Api *ApiTransactor) SetSqueethAddress(opts *bind.TransactOpts, _oSqth common.Address) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "setSqueethAddress", _oSqth)
}

// SetSqueethAddress is a paid mutator transaction binding the contract method 0x032a836d.
//
// Solidity: function setSqueethAddress(address _oSqth) returns()
func (_Api *ApiSession) SetSqueethAddress(_oSqth common.Address) (*types.Transaction, error) {
	return _Api.Contract.SetSqueethAddress(&_Api.TransactOpts, _oSqth)
}

// SetSqueethAddress is a paid mutator transaction binding the contract method 0x032a836d.
//
// Solidity: function setSqueethAddress(address _oSqth) returns()
func (_Api *ApiTransactorSession) SetSqueethAddress(_oSqth common.Address) (*types.Transaction, error) {
	return _Api.Contract.SetSqueethAddress(&_Api.TransactOpts, _oSqth)
}

// SetVaultCap is a paid mutator transaction binding the contract method 0xf0f5907d.
//
// Solidity: function setVaultCap(uint256 newMax) returns()
func (_Api *ApiTransactor) SetVaultCap(opts *bind.TransactOpts, newMax *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "setVaultCap", newMax)
}

// SetVaultCap is a paid mutator transaction binding the contract method 0xf0f5907d.
//
// Solidity: function setVaultCap(uint256 newMax) returns()
func (_Api *ApiSession) SetVaultCap(newMax *big.Int) (*types.Transaction, error) {
	return _Api.Contract.SetVaultCap(&_Api.TransactOpts, newMax)
}

// SetVaultCap is a paid mutator transaction binding the contract method 0xf0f5907d.
//
// Solidity: function setVaultCap(uint256 newMax) returns()
func (_Api *ApiTransactorSession) SetVaultCap(newMax *big.Int) (*types.Transaction, error) {
	return _Api.Contract.SetVaultCap(&_Api.TransactOpts, newMax)
}

// Sweep is a paid mutator transaction binding the contract method 0x6ea056a9.
//
// Solidity: function sweep(address _token, uint256 amount) returns()
func (_Api *ApiTransactor) Sweep(opts *bind.TransactOpts, _token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "sweep", _token, amount)
}

// Sweep is a paid mutator transaction binding the contract method 0x6ea056a9.
//
// Solidity: function sweep(address _token, uint256 amount) returns()
func (_Api *ApiSession) Sweep(_token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Sweep(&_Api.TransactOpts, _token, amount)
}

// Sweep is a paid mutator transaction binding the contract method 0x6ea056a9.
//
// Solidity: function sweep(address _token, uint256 amount) returns()
func (_Api *ApiTransactorSession) Sweep(_token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Sweep(&_Api.TransactOpts, _token, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Api *ApiTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Api *ApiSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Transfer(&_Api.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Api *ApiTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Transfer(&_Api.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Api *ApiTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Api *ApiSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.TransferFrom(&_Api.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Api *ApiTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.TransferFrom(&_Api.TransactOpts, sender, recipient, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xc6ab5d90.
//
// Solidity: function withdraw(uint8 percent) returns()
func (_Api *ApiTransactor) Withdraw(opts *bind.TransactOpts, percent uint8) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "withdraw", percent)
}

// Withdraw is a paid mutator transaction binding the contract method 0xc6ab5d90.
//
// Solidity: function withdraw(uint8 percent) returns()
func (_Api *ApiSession) Withdraw(percent uint8) (*types.Transaction, error) {
	return _Api.Contract.Withdraw(&_Api.TransactOpts, percent)
}

// Withdraw is a paid mutator transaction binding the contract method 0xc6ab5d90.
//
// Solidity: function withdraw(uint8 percent) returns()
func (_Api *ApiTransactorSession) Withdraw(percent uint8) (*types.Transaction, error) {
	return _Api.Contract.Withdraw(&_Api.TransactOpts, percent)
}

// WithdrawLoop is a paid mutator transaction binding the contract method 0xb27686c0.
//
// Solidity: function withdrawLoop() returns()
func (_Api *ApiTransactor) WithdrawLoop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "withdrawLoop")
}

// WithdrawLoop is a paid mutator transaction binding the contract method 0xb27686c0.
//
// Solidity: function withdrawLoop() returns()
func (_Api *ApiSession) WithdrawLoop() (*types.Transaction, error) {
	return _Api.Contract.WithdrawLoop(&_Api.TransactOpts)
}

// WithdrawLoop is a paid mutator transaction binding the contract method 0xb27686c0.
//
// Solidity: function withdrawLoop() returns()
func (_Api *ApiTransactorSession) WithdrawLoop() (*types.Transaction, error) {
	return _Api.Contract.WithdrawLoop(&_Api.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Api *ApiTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Api.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Api *ApiSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Api.Contract.Fallback(&_Api.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Api *ApiTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Api.Contract.Fallback(&_Api.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Api *ApiTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Api *ApiSession) Receive() (*types.Transaction, error) {
	return _Api.Contract.Receive(&_Api.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Api *ApiTransactorSession) Receive() (*types.Transaction, error) {
	return _Api.Contract.Receive(&_Api.TransactOpts)
}

// ApiApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Api contract.
type ApiApprovalIterator struct {
	Event *ApiApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiApproval represents a Approval event raised by the Api contract.
type ApiApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Api *ApiFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ApiApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ApiApprovalIterator{contract: _Api.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Api *ApiFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ApiApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiApproval)
				if err := _Api.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Api *ApiFilterer) ParseApproval(log types.Log) (*ApiApproval, error) {
	event := new(ApiApproval)
	if err := _Api.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Api contract.
type ApiDepositIterator struct {
	Event *ApiDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiDeposit represents a Deposit event raised by the Api contract.
type ApiDeposit struct {
	Sender  common.Address
	Shares  *big.Int
	Amount0 *big.Int
	Amount1 *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed sender, uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiFilterer) FilterDeposit(opts *bind.FilterOpts, sender []common.Address) (*ApiDepositIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Deposit", senderRule)
	if err != nil {
		return nil, err
	}
	return &ApiDepositIterator{contract: _Api.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed sender, uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *ApiDeposit, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Deposit", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiDeposit)
				if err := _Api.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e.
//
// Solidity: event Deposit(address indexed sender, uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiFilterer) ParseDeposit(log types.Log) (*ApiDeposit, error) {
	event := new(ApiDeposit)
	if err := _Api.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiMintFeesIterator is returned from FilterMintFees and is used to iterate over the raw logs and unpacked data for MintFees events raised by the Api contract.
type ApiMintFeesIterator struct {
	Event *ApiMintFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiMintFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiMintFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiMintFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiMintFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiMintFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiMintFees represents a MintFees event raised by the Api contract.
type ApiMintFees struct {
	Arg0  common.Address
	Share *big.Int
	F0    *big.Int
	F1    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMintFees is a free log retrieval operation binding the contract event 0x9e3d2872f834d8efb99aa5e10ba94c9178c9969ab95c39f453b5807265389cbf.
//
// Solidity: event MintFees(address indexed arg0, uint256 share, uint256 f0, uint256 f1)
func (_Api *ApiFilterer) FilterMintFees(opts *bind.FilterOpts, arg0 []common.Address) (*ApiMintFeesIterator, error) {

	var arg0Rule []interface{}
	for _, arg0Item := range arg0 {
		arg0Rule = append(arg0Rule, arg0Item)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "MintFees", arg0Rule)
	if err != nil {
		return nil, err
	}
	return &ApiMintFeesIterator{contract: _Api.contract, event: "MintFees", logs: logs, sub: sub}, nil
}

// WatchMintFees is a free log subscription operation binding the contract event 0x9e3d2872f834d8efb99aa5e10ba94c9178c9969ab95c39f453b5807265389cbf.
//
// Solidity: event MintFees(address indexed arg0, uint256 share, uint256 f0, uint256 f1)
func (_Api *ApiFilterer) WatchMintFees(opts *bind.WatchOpts, sink chan<- *ApiMintFees, arg0 []common.Address) (event.Subscription, error) {

	var arg0Rule []interface{}
	for _, arg0Item := range arg0 {
		arg0Rule = append(arg0Rule, arg0Item)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "MintFees", arg0Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiMintFees)
				if err := _Api.contract.UnpackLog(event, "MintFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintFees is a log parse operation binding the contract event 0x9e3d2872f834d8efb99aa5e10ba94c9178c9969ab95c39f453b5807265389cbf.
//
// Solidity: event MintFees(address indexed arg0, uint256 share, uint256 f0, uint256 f1)
func (_Api *ApiFilterer) ParseMintFees(log types.Log) (*ApiMintFees, error) {
	event := new(ApiMintFees)
	if err := _Api.contract.UnpackLog(event, "MintFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiPendingWithdrawIterator is returned from FilterPendingWithdraw and is used to iterate over the raw logs and unpacked data for PendingWithdraw events raised by the Api contract.
type ApiPendingWithdrawIterator struct {
	Event *ApiPendingWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiPendingWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiPendingWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiPendingWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiPendingWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiPendingWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiPendingWithdraw represents a PendingWithdraw event raised by the Api contract.
type ApiPendingWithdraw struct {
	To      common.Address
	Pending bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPendingWithdraw is a free log retrieval operation binding the contract event 0x737d22145a9fcc251124223d8fd388f39e914fbf3943968c334e1bd2e1685215.
//
// Solidity: event PendingWithdraw(address to, bool pending)
func (_Api *ApiFilterer) FilterPendingWithdraw(opts *bind.FilterOpts) (*ApiPendingWithdrawIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "PendingWithdraw")
	if err != nil {
		return nil, err
	}
	return &ApiPendingWithdrawIterator{contract: _Api.contract, event: "PendingWithdraw", logs: logs, sub: sub}, nil
}

// WatchPendingWithdraw is a free log subscription operation binding the contract event 0x737d22145a9fcc251124223d8fd388f39e914fbf3943968c334e1bd2e1685215.
//
// Solidity: event PendingWithdraw(address to, bool pending)
func (_Api *ApiFilterer) WatchPendingWithdraw(opts *bind.WatchOpts, sink chan<- *ApiPendingWithdraw) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "PendingWithdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiPendingWithdraw)
				if err := _Api.contract.UnpackLog(event, "PendingWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePendingWithdraw is a log parse operation binding the contract event 0x737d22145a9fcc251124223d8fd388f39e914fbf3943968c334e1bd2e1685215.
//
// Solidity: event PendingWithdraw(address to, bool pending)
func (_Api *ApiFilterer) ParsePendingWithdraw(log types.Log) (*ApiPendingWithdraw, error) {
	event := new(ApiPendingWithdraw)
	if err := _Api.contract.UnpackLog(event, "PendingWithdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Api contract.
type ApiTransferIterator struct {
	Event *ApiTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiTransfer represents a Transfer event raised by the Api contract.
type ApiTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Api *ApiFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ApiTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ApiTransferIterator{contract: _Api.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Api *ApiFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ApiTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiTransfer)
				if err := _Api.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Api *ApiFilterer) ParseTransfer(log types.Log) (*ApiTransfer, error) {
	event := new(ApiTransfer)
	if err := _Api.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Api contract.
type ApiWithdrawIterator struct {
	Event *ApiWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiWithdraw represents a Withdraw event raised by the Api contract.
type ApiWithdraw struct {
	Sender  common.Address
	Shares  *big.Int
	Amount0 *big.Int
	Amount1 *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed sender, uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiFilterer) FilterWithdraw(opts *bind.FilterOpts, sender []common.Address) (*ApiWithdrawIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return &ApiWithdrawIterator{contract: _Api.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed sender, uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ApiWithdraw, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiWithdraw)
				if err := _Api.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94.
//
// Solidity: event Withdraw(address indexed sender, uint256 shares, uint256 amount0, uint256 amount1)
func (_Api *ApiFilterer) ParseWithdraw(log types.Log) (*ApiWithdraw, error) {
	event := new(ApiWithdraw)
	if err := _Api.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
