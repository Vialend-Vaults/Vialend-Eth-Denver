// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ApiMetaData contains all meta data concerning the Api contract.
var ApiMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"DeployedVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_individualCap\",\"type\":\"uint256\"}],\"name\":\"deployVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612853806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632a3c85d714610030575b600080fd5b61004361003e366004610174565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000444260405160200161007d929190918252602082015260400190565b604051602081830303815290604052805190602001208787878787876040516100a59061014b565b6001600160a01b0396871681529486166020860152928516604085015293166060830152608082019290925260a081019190915260c0018190604051809103906000f59050801580156100fc573d6000803e3d6000fd5b50604080513381526001600160a01b03831660208201529192507f28d9818484d67ad81afbae2a0d8d27c79edafad23d79fbe236508fce84dab54e910160405180910390a19695505050505050565b612643806101db83390190565b80356001600160a01b038116811461016f57600080fd5b919050565b60008060008060008060c0878903121561018d57600080fd5b61019687610158565b95506101a460208801610158565b94506101b260408801610158565b93506101c060608801610158565b92506080870135915060a08701359050929550929550929556fe610100604052600c805460ff191690553480156200001c57600080fd5b5060405162002643380380620026438339810160408190526200003f91620001b0565b604080518082018252601a81527f5669614c656e6420556e6920436f6d706f756e6420546f6b656e0000000000006020808301918252835180850190945260048452630565543360e41b908401528151919291620000a091600391620000ed565b508051620000b6906004906020840190620000ed565b50506001600555506001600160a01b0395861660805293851660a05291841660c05290921660e052600a91909155600b556200025c565b828054620000fb906200021f565b90600052602060002090601f0160209004810192826200011f57600085556200016a565b82601f106200013a57805160ff19168380011785556200016a565b828001600101855582156200016a579182015b828111156200016a5782518255916020019190600101906200014d565b50620001789291506200017c565b5090565b5b808211156200017857600081556001016200017d565b80516001600160a01b0381168114620001ab57600080fd5b919050565b60008060008060008060c08789031215620001ca57600080fd5b620001d58762000193565b9550620001e56020880162000193565b9450620001f56040880162000193565b9350620002056060880162000193565b92506080870151915060a087015190509295509295509295565b600181811c908216806200023457607f821691505b602082108114156200025657634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161232f620003146000396000818161062b01528181610a9001528181610bff0152818161110b0152818161135a015261169a01526000818161028601528181610bc2015281816110d7015281816111e801528181611318015261165f01526000818161073a01528181610b500152818161118e0152818161142101526117210152600081816105780152818161123a0152818161139d015281816114cf0152611a97015261232f6000f3fe6080604052600436106101f05760003560e01c8063a457c2d71161010c578063d0b6ba2a1161009a578063dd62ed3e1161006c578063dd62ed3e14610682578063e2bbb158146106c8578063f0f5907d146106e8578063f2a40db814610708578063f851a4401461072857005b8063d0b6ba2a14610604578063d21220a714610619578063d46915bc1461064d578063d8d7f96f1461066d57005b8063b49c308e116100de578063b49c308e14610546578063c45a015514610566578063c6ab5d901461059a578063cd2b3026146105cf578063ceadeae0146105ef57005b8063a457c2d7146104b9578063a8c62e76146104d9578063a9059cbb146104f9578063aabfd5721461051957005b806333e2f2ea116101895780635bb6aa851161015b5780635bb6aa85146103b75780635ccaf589146104345780636ea056a91461044e57806370a082311461046e57806395d89b41146104a457005b806333e2f2ea14610331578063385602f81461036c57806339509351146103815780633c1bda09146103a157005b806318160ddd116101c257806318160ddd146102c05780631ba326c4146102d557806323b872dd146102f5578063313ce5671461031557005b80630276650b146101f957806306fdde0314610222578063095ea7b3146102445780630dfe16811461027457005b366101f757005b005b34801561020557600080fd5b5061020f600b5481565b6040519081526020015b60405180910390f35b34801561022e57600080fd5b5061023761075c565b6040516102199190611fe9565b34801561025057600080fd5b5061026461025f366004612034565b6107ee565b6040519015158152602001610219565b34801561028057600080fd5b506102a87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610219565b3480156102cc57600080fd5b5060025461020f565b3480156102e157600080fd5b5061020f6102f0366004612060565b610804565b34801561030157600080fd5b5061026461031036600461208c565b610824565b34801561032157600080fd5b5060405160128152602001610219565b34801561033d57600080fd5b5061035161034c3660046120cd565b6108d3565b60408051938452602084019290925290820152606001610219565b34801561037857600080fd5b5061020f610a78565b34801561038d57600080fd5b5061026461039c366004612034565b610b09565b3480156103ad57600080fd5b5061020f600a5481565b3480156103c357600080fd5b506104076103d23660046120ef565b600860205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610219565b34801561044057600080fd5b50600c546102649060ff1681565b34801561045a57600080fd5b506101f7610469366004612034565b610b45565b34801561047a57600080fd5b5061020f6104893660046120ef565b6001600160a01b031660009081526020819052604090205490565b3480156104b057600080fd5b50610237610c7e565b3480156104c557600080fd5b506102646104d4366004612034565b610c8d565b3480156104e557600080fd5b506009546102a8906001600160a01b031681565b34801561050557600080fd5b50610264610514366004612034565b610d26565b34801561052557600080fd5b5061020f6105343660046120ef565b60076020526000908152604090205481565b34801561055257600080fd5b5061020f6105613660046120cd565b610d33565b34801561057257600080fd5b506102a87f000000000000000000000000000000000000000000000000000000000000000081565b3480156105a657600080fd5b506105ba6105b536600461210c565b610dc1565b60408051928352602083019190915201610219565b3480156105db57600080fd5b506101f76105ea36600461212f565b611183565b3480156105fb57600080fd5b5061020f6111d0565b34801561061057600080fd5b506101f761121f565b34801561062557600080fd5b506102a87f000000000000000000000000000000000000000000000000000000000000000081565b34801561065957600080fd5b506101f76106683660046120ef565b611392565b34801561067957600080fd5b506101f7611416565b34801561068e57600080fd5b5061020f61069d366004612148565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156106d457600080fd5b506101f76106e33660046120cd565b6114ba565b3480156106f457600080fd5b506101f761070336600461212f565b611716565b34801561071457600080fd5b506102a861072336600461212f565b611763565b34801561073457600080fd5b506102a87f000000000000000000000000000000000000000000000000000000000000000081565b60606003805461076b90612181565b80601f016020809104026020016040519081016040528092919081815260200182805461079790612181565b80156107e45780601f106107b9576101008083540402835291602001916107e4565b820191906000526020600020905b8154815290600101906020018083116107c757829003601f168201915b5050505050905090565b60006107fb33848461178d565b50600192915050565b600061081084836121d2565b61081a90846121f4565b90505b9392505050565b60006108318484846118b1565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156108bb5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6108c8853385840361178d565b506001949350505050565b60008282826108e0611a7f565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610941919061220c565b9050600081116109785760405162461bcd60e51b8152602060048201526002602482015261070360f41b60448201526064016108b2565b600061098360025490565b90508061099c57610995828585610804565b9450610a6f565b6000806109a7611a7f565b6001600160a01b031663c4a7761e6040518163ffffffff1660e01b815260040160408051808303816000875af11580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190612225565b91509150610a156111d0565b610a1f90836121f4565b9150610a29610a78565b610a3390826121f4565b90506000610a42858484610804565b90506000610a51868c8c610804565b905081610a5e8683612249565b610a6891906121d2565b9850505050505b50509250925092565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b04919061220c565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916107fb918590610b409086906121f4565b61178d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b8d5760405162461bcd60e51b81526004016108b290612268565b33610bc05760405162461bcd60e51b81526020600482015260036024820152620e660f60eb1b60448201526064016108b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614158015610c3457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b610c665760405162461bcd60e51b8152602060048201526003602482015262746f6b60e81b60448201526064016108b2565b610c7a6001600160a01b0383163383611b0a565b5050565b60606004805461076b90612181565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610d0f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016108b2565b610d1c338585840361178d565b5060019392505050565b60006107fb3384846118b1565b600080610d3e611a7f565b6001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f919061220c565b9050600083610dae8387612249565b610db891906121f4565b95945050505050565b60008033610df75760405162461bcd60e51b81526020600482015260036024820152620ee60f60eb1b60448201526064016108b2565b60648360ff161115610e305760405162461bcd60e51b8152602060048201526002602482015261706360f01b60448201526064016108b2565b33600090815260208190526040812054606490610e519060ff871690612249565b610e5b91906121d2565b90506000610e6860025490565b9050600082118015610e7a5750808211155b610eaf5760405162461bcd60e51b815260206004820152600660248201526573686172657360d01b60448201526064016108b2565b610eb93383611b72565b600080610ec4611a7f565b6001600160a01b031663c4a7761e6040518163ffffffff1660e01b815260040160408051808303816000875af1158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190612225565b91509150600080610f356111d0565b610f3d610a78565b9092509050600080610f4f84876121f4565b610f5984876121f4565b909250905086610f698984612249565b610f7391906121d2565b995086610f808983612249565b610f8a91906121d2565b985060008a851080610f9b57508984105b1561108c57610fa8611a7f565b6040516371c851dd60e01b8152336004820152602481018d9052604481018c90526001600160a01b0391909116906371c851dd906064016020604051808303816000875af1158015610ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110229190612287565b905060008061102f6111d0565b611037610a78565b915091508c821015801561104b57508b8110155b6110855760405162461bcd60e51b815260206004820152600b60248201526a6e65772062616c616e636560a81b60448201526064016108b2565b5050611090565b5060015b806110ca5760405162461bcd60e51b815260206004820152600a6024820152691cdd1c985d08199d5b9960b21b60448201526064016108b2565b6110fe6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338d611b0a565b6111326001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338c611b0a565b604080518a8152602081018d90529081018b905233907f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600160405180910390a2505050505050505050915091565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111cb5760405162461bcd60e51b81526004016108b290612268565b600b55565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401610ac3565b604051632aaafb6d60e01b81523060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632aaafb6d90604401602060405180830381865afa158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612287565b6112e55760405162461bcd60e51b81526020600482015260096024820152681b9bdd081cdd1c985d60ba1b60448201526064016108b2565b60006112ef6111d0565b905060006112fb610a78565b9050811561133f5761133f61130e611a7f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084611b0a565b801561138157611381611350611a7f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083611b0a565b5050600c805460ff19166001179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113f45760405162461bcd60e51b8152602060048201526007602482015266666163746f727960c81b60448201526064016108b2565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461145e5760405162461bcd60e51b81526004016108b290612268565b611466611a7f565b6001600160a01b0316637c7311fe6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114a057600080fd5b505af11580156114b4573d6000803e3d6000fd5b50505050565b6040516376beea2760e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ed7dd44e90602401602060405180830381865afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190612287565b61157b5760405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b60448201526064016108b2565b600082118061158a5750600081115b6115bf5760405162461bcd60e51b81526004016108b2906020808252600490820152630616d74360e41b604082015260600190565b336115f25760405162461bcd60e51b81526020600482015260036024820152620c860f60eb1b60448201526064016108b2565b600080600061160185856108d3565b925092509250600083116116425760405162461bcd60e51b8152602060048201526008602482015267073686172653c3d360c41b60448201526064016108b2565b61164c3384611cc0565b8115611687576116876001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611d9f565b80156116c2576116c26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084611d9f565b600c805460ff19169055604080518481526020810184905290810182905233907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a25050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461175e5760405162461bcd60e51b81526004016108b290612268565b600a55565b6006818154811061177357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0383166117ef5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108b2565b6001600160a01b0382166118505760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108b2565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166119155760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016108b2565b6001600160a01b0382166119775760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108b2565b6001600160a01b038316600090815260208190526040902054818110156119ef5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016108b2565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611a269084906121f4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611a7291815260200190565b60405180910390a36114b4565b604051630ccc6b1960e31b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063666358c890602401602060405180830381865afa158015611ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0491906122a9565b6040516001600160a01b038316602482015260448101829052611b6d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611dd7565b505050565b6001600160a01b038216611bd25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016108b2565b6001600160a01b03821660009081526020819052604090205481811015611c465760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016108b2565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611c759084906122c6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038216611d165760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108b2565b8060026000828254611d2891906121f4565b90915550506001600160a01b03821660009081526020819052604081208054839290611d559084906121f4565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526114b49085906323b872dd60e01b90608401611b36565b6000611e2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ea99092919063ffffffff16565b805190915015611b6d5780806020019051810190611e4a9190612287565b611b6d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108b2565b606061081a8484600085856001600160a01b0385163b611f0b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b2565b600080866001600160a01b03168587604051611f2791906122dd565b60006040518083038185875af1925050503d8060008114611f64576040519150601f19603f3d011682016040523d82523d6000602084013e611f69565b606091505b5091509150611f79828286611f84565b979650505050505050565b60608315611f9357508161081d565b825115611fa35782518084602001fd5b8160405162461bcd60e51b81526004016108b29190611fe9565b60005b83811015611fd8578181015183820152602001611fc0565b838111156114b45750506000910152565b6020815260008251806020840152612008816040850160208701611fbd565b601f01601f19169190910160400192915050565b6001600160a01b038116811461203157600080fd5b50565b6000806040838503121561204757600080fd5b82356120528161201c565b946020939093013593505050565b60008060006060848603121561207557600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156120a157600080fd5b83356120ac8161201c565b925060208401356120bc8161201c565b929592945050506040919091013590565b600080604083850312156120e057600080fd5b50508035926020909101359150565b60006020828403121561210157600080fd5b813561081d8161201c565b60006020828403121561211e57600080fd5b813560ff8116811461081d57600080fd5b60006020828403121561214157600080fd5b5035919050565b6000806040838503121561215b57600080fd5b82356121668161201c565b915060208301356121768161201c565b809150509250929050565b600181811c9082168061219557607f821691505b602082108114156121b657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000826121ef57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612207576122076121bc565b500190565b60006020828403121561221e57600080fd5b5051919050565b6000806040838503121561223857600080fd5b505080516020909101519092909150565b6000816000190483118215151615612263576122636121bc565b500290565b60208082526005908201526430b236b4b760d91b604082015260600190565b60006020828403121561229957600080fd5b8151801515811461081d57600080fd5b6000602082840312156122bb57600080fd5b815161081d8161201c565b6000828210156122d8576122d86121bc565b500390565b600082516122ef818460208701611fbd565b919091019291505056fea2646970667358221220cfe180d90e65b61a8d7dbeefe5f683e08d3e7c9eb5ea249c2a00a232a187dde564736f6c634300080a0033a26469706673582212201d67930008ba33ece4751e5930eee862b41683c75bf2c59f17a9464cc7d9045064736f6c634300080a0033",
}

// ApiABI is the input ABI used to generate the binding from.
// Deprecated: Use ApiMetaData.ABI instead.
var ApiABI = ApiMetaData.ABI

// ApiBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApiMetaData.Bin instead.
var ApiBin = ApiMetaData.Bin

// DeployApi deploys a new Ethereum contract, binding an instance of Api to it.
func DeployApi(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Api, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApiBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// Api is an auto generated Go binding around an Ethereum contract.
type Api struct {
	ApiCaller     // Read-only binding to the contract
	ApiTransactor // Write-only binding to the contract
	ApiFilterer   // Log filterer for contract events
}

// ApiCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApiCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApiTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApiFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApiSession struct {
	Contract     *Api              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApiCallerSession struct {
	Contract *ApiCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ApiTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApiTransactorSession struct {
	Contract     *ApiTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApiRaw struct {
	Contract *Api // Generic contract binding to access the raw methods on
}

// ApiCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApiCallerRaw struct {
	Contract *ApiCaller // Generic read-only contract binding to access the raw methods on
}

// ApiTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApiTransactorRaw struct {
	Contract *ApiTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApi creates a new instance of Api, bound to a specific deployed contract.
func NewApi(address common.Address, backend bind.ContractBackend) (*Api, error) {
	contract, err := bindApi(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// NewApiCaller creates a new read-only instance of Api, bound to a specific deployed contract.
func NewApiCaller(address common.Address, caller bind.ContractCaller) (*ApiCaller, error) {
	contract, err := bindApi(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApiCaller{contract: contract}, nil
}

// NewApiTransactor creates a new write-only instance of Api, bound to a specific deployed contract.
func NewApiTransactor(address common.Address, transactor bind.ContractTransactor) (*ApiTransactor, error) {
	contract, err := bindApi(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApiTransactor{contract: contract}, nil
}

// NewApiFilterer creates a new log filterer instance of Api, bound to a specific deployed contract.
func NewApiFilterer(address common.Address, filterer bind.ContractFilterer) (*ApiFilterer, error) {
	contract, err := bindApi(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApiFilterer{contract: contract}, nil
}

// bindApi binds a generic wrapper to an already deployed contract.
func bindApi(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ApiABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.ApiCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.contract.Transact(opts, method, params...)
}

// DeployVault is a paid mutator transaction binding the contract method 0x2a3c85d7.
//
// Solidity: function deployVault(address _factory, address _admin, address token0, address token1, uint256 _vaultCap, uint256 _individualCap) returns(address _vault)
func (_Api *ApiTransactor) DeployVault(opts *bind.TransactOpts, _factory common.Address, _admin common.Address, token0 common.Address, token1 common.Address, _vaultCap *big.Int, _individualCap *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "deployVault", _factory, _admin, token0, token1, _vaultCap, _individualCap)
}

// DeployVault is a paid mutator transaction binding the contract method 0x2a3c85d7.
//
// Solidity: function deployVault(address _factory, address _admin, address token0, address token1, uint256 _vaultCap, uint256 _individualCap) returns(address _vault)
func (_Api *ApiSession) DeployVault(_factory common.Address, _admin common.Address, token0 common.Address, token1 common.Address, _vaultCap *big.Int, _individualCap *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DeployVault(&_Api.TransactOpts, _factory, _admin, token0, token1, _vaultCap, _individualCap)
}

// DeployVault is a paid mutator transaction binding the contract method 0x2a3c85d7.
//
// Solidity: function deployVault(address _factory, address _admin, address token0, address token1, uint256 _vaultCap, uint256 _individualCap) returns(address _vault)
func (_Api *ApiTransactorSession) DeployVault(_factory common.Address, _admin common.Address, token0 common.Address, token1 common.Address, _vaultCap *big.Int, _individualCap *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DeployVault(&_Api.TransactOpts, _factory, _admin, token0, token1, _vaultCap, _individualCap)
}

// ApiDeployedVaultIterator is returned from FilterDeployedVault and is used to iterate over the raw logs and unpacked data for DeployedVault events raised by the Api contract.
type ApiDeployedVaultIterator struct {
	Event *ApiDeployedVault // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiDeployedVaultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiDeployedVault)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiDeployedVault)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiDeployedVaultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiDeployedVaultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiDeployedVault represents a DeployedVault event raised by the Api contract.
type ApiDeployedVault struct {
	Sender common.Address
	Vault  common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDeployedVault is a free log retrieval operation binding the contract event 0x28d9818484d67ad81afbae2a0d8d27c79edafad23d79fbe236508fce84dab54e.
//
// Solidity: event DeployedVault(address sender, address _vault)
func (_Api *ApiFilterer) FilterDeployedVault(opts *bind.FilterOpts) (*ApiDeployedVaultIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "DeployedVault")
	if err != nil {
		return nil, err
	}
	return &ApiDeployedVaultIterator{contract: _Api.contract, event: "DeployedVault", logs: logs, sub: sub}, nil
}

// WatchDeployedVault is a free log subscription operation binding the contract event 0x28d9818484d67ad81afbae2a0d8d27c79edafad23d79fbe236508fce84dab54e.
//
// Solidity: event DeployedVault(address sender, address _vault)
func (_Api *ApiFilterer) WatchDeployedVault(opts *bind.WatchOpts, sink chan<- *ApiDeployedVault) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "DeployedVault")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiDeployedVault)
				if err := _Api.contract.UnpackLog(event, "DeployedVault", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedVault is a log parse operation binding the contract event 0x28d9818484d67ad81afbae2a0d8d27c79edafad23d79fbe236508fce84dab54e.
//
// Solidity: event DeployedVault(address sender, address _vault)
func (_Api *ApiFilterer) ParseDeployedVault(log types.Log) (*ApiDeployedVault, error) {
	event := new(ApiDeployedVault)
	if err := _Api.contract.UnpackLog(event, "DeployedVault", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
